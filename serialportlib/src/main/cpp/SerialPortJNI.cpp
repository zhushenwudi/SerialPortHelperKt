/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <string>
#include "include/SerialPortJNI.h"
#include "include/SerialPortLog.h"
#include "include/SerialPort.h"

/* Header for class top_keepempty_sph_library_SerialPortJNI */

SerialPort *getSerialPort(JNIEnv *env, jobject thiz) {
    jclass clazz = env->GetObjectClass(thiz);
    jfieldID fid = env->GetFieldID(clazz, "nativeSerialPort", "J");
    jlong p = env->GetLongField(thiz, fid);
    return (SerialPort *) p;
}

void setSerialPort(JNIEnv *env, jobject thiz, const SerialPort *pSerialPort) {
    jclass clazz = env->GetObjectClass(thiz);
    jfieldID fid = env->GetFieldID(clazz, "nativeSerialPort", "J");
    env->SetLongField(thiz, fid, (jlong) pSerialPort);
}

/*
 * Class:     top_keepempty_sph_library_SerialPortJNI
 * Method:    openPort
 * Signature: (Ljava/lang/String;IIIII)I
 */
extern "C" JNIEXPORT jint JNICALL Java_top_keepempty_sph_library_SerialPortJNI_openPort
        (JNIEnv *env, jobject thiz, jstring path, jint baudRate, jint dataBits, jint stopBits,
         jchar parity) {

    try {
        SerialPortConfig config;
        config = SerialPortConfig();
        config.baudrate = baudRate;
        config.databits = dataBits;
        config.stopbits = stopBits;
        config.parity = parity;
        SerialPort *pSerialPort = new SerialPort(env->GetStringUTFChars(path, 0));
        setSerialPort(env, thiz, pSerialPort);
        return pSerialPort->openSerialPort(config);
    } catch (char *exception) {
        LOGE("Open device is error! Message:%s", exception);
        return FALSE;
    }
}

/*
 * Class:     top_keepempty_sph_library_SerialPortJNI
 * Method:    readPort
 * Signature: (I)[B
 */
extern "C" JNIEXPORT jbyteArray JNICALL Java_top_keepempty_sph_library_SerialPortJNI_readPort
        (JNIEnv *env, jobject thiz, jint maxSize) {
    SerialPort *pSerialPort = getSerialPort(env, thiz);

    BYTE buf[maxSize];
    int len;
    len = pSerialPort->readData(buf, maxSize);
    if (len < 1) return NULL;
    jbyteArray byteArray;
    jbyte *bytes = reinterpret_cast<jbyte *>(buf);
    byteArray = env->NewByteArray(len);
    env->SetByteArrayRegion(byteArray, 0, len, bytes);
    return byteArray;
}

/*
 * Class:     top_keepempty_sph_library_SerialPortJNI
 * Method:    writePort
 * Signature: ([B)V
 */
extern "C" JNIEXPORT void JNICALL Java_top_keepempty_sph_library_SerialPortJNI_writePort
        (JNIEnv *env, jobject thiz, jbyteArray data) {
    SerialPort *pSerialPort = getSerialPort(env, thiz);

    jbyte *array = env->GetByteArrayElements(data, 0);
    BYTE *bytes = reinterpret_cast<BYTE *>(array);
    jsize arrayLength = env->GetArrayLength(data);
    pSerialPort->writeData(bytes, (int) arrayLength);
}

/*
 * Class:     top_keepempty_sph_library_SerialPortJNI
 * Method:    setMode
 * Signature: (I)I
 */
extern "C" JNIEXPORT jint JNICALL Java_top_keepempty_sph_library_SerialPortJNI_setMode
        (JNIEnv *env, jobject thiz, jint mode) {
    SerialPort *pSerialPort = getSerialPort(env, thiz);

    return pSerialPort->setMode(mode);
}


/*
 * Class:     top_keepempty_sph_library_SerialPortJNI
 * Method:    closePort
 * Signature: ()V
 */
extern "C" JNIEXPORT void JNICALL Java_top_keepempty_sph_library_SerialPortJNI_closePort
        (JNIEnv *env, jobject thiz) {
    SerialPort *pSerialPort = getSerialPort(env, thiz);

    pSerialPort->closePort();
    pSerialPort = NULL;
}

extern "C"
JNIEXPORT void JNICALL
Java_top_keepempty_sph_library_SerialPortJNI_finalize(JNIEnv *env, jobject thiz) {
    SerialPort *pSerialPort = getSerialPort(env, thiz);

    if (pSerialPort != NULL) {
        delete pSerialPort;
        pSerialPort = NULL;

        setSerialPort(env, thiz, pSerialPort);
    }
}
